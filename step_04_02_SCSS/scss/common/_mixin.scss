// mixin

$url: "../../images/";
$baseSize: 16;
$root: 16;

// @mixin bgImg() {
//   background: {
//     image: url();
//     repeat: no-repeat;
//     position: 50% 50%;
//     size: initial;
//   }
// }
@mixin bgImg($i, $r: no-repeat, $p: 50% 50%, $z: initial) {
  background: {
    image: url(#{url}#{$i});
    repeat: $r;
    position: $p;
    size: $z;
  }
}


@mixin size($w: 100%, $h: auto) {
  width: $w;
  height: $h;
  @content; 
}


// @mixin unit($s, $u) {
//   #{$s}: #{$u}px;        // 구형 브라우저에서는 이게 동작하고 
//   #{$s}: #{$u / $baseSize}rem;  // 신형에서는 이게 동작할 수 있게끔 ... 
// }
// // 사용 방법 
// // @include px(width, 100); 

// // 위에 믹스인 함수로 바꿔보기 
// // scss 함수 사용 방법 
// @function rem($u) {
//   @return ($u / $baseSize)+rem;  
// }


// 하지만 함수가 믹스인 전에 와야한다 
// scss 함수 사용 방법 
@function rem($u) {
  @return ($u / $baseSize) + rem;  
}

// 단위를 px과 rem 모두 작성해주는 mixin 생성 
@mixin unit($s, $u) {
  #{$s}: #{$u}px;        // 구형 브라우저에서는 이게 동작하고 
  #{$s}: rem($u);  // 신형에서는 이게 동작할 수 있게끔 ... 
}


// 그래서 위의 예시를 보고... 아래와 같이 응용...
$divice: 360;
@function vw($u, $d: $divice) {
  @return ($u / $d * 100) + vw;   // 기본적인 단위 / 기기 크기 * 100
}




// -------------------------------------
// -------------------------------------
// 다시!!
// 단위를 px과 rem 모두 작성해주는 mixin 생성 
@mixin unit2($s2, $u2) {
  #{$s2}: $u2+px;
  #{$s2}: $u2/16+rem;
}

// 사용 방법 예시 
// .box2 {
//   @include unit2(width, 320);
//   @include unit2(height, 640);
//   @include unit2(border-radius, 10);
//   @include unit2(padding, 10);
//   @include unit2(margin, 30);
// }




// -------------------------------------
// -------------------------------------
// 다시!!
// 기준 디바이스 크기를 입력하고 그에 따라 
// vw를 계산해주는 "계산기" mixin 생성 
$device: 600;
@mixin vw2($s, $u, $d: $device) {
  #{$s}: $u+px;
  #{$s}: ($u / $d *100)+vw;
  min: {
    #{$s}: $u+px;
    #{$s}: ($u / $root)+rem;
  }
}



// -------------------------------------
// -------------------------------------
// 그럼!!
// 왜 믹스인 말고 함수를 사용? 
// 위의 @mixin unit과 @mixin vw 는 그 안에 들어가는 parameter가 겹친다!
// 그래서 이렇게 기억하기!
// @mixin은 여러가지 다양한/광범위한 아이들을 섞어서 사용가능하다 - 선택자부터, 속성명, 값, @import 등 대부분의 기능을 다 사용할 수 있다
// e.g. 
// @mixin impt() {
//   @import "variable";
//   @import "function";
//   @import "mixin";
//   @import "reset";
//   @import "common";
//   @content;
// }
// 사용 방법
// @include impt;


// 하지만 @function은 값만 처리해서 삽입하는 기능이다
// e.g.
// 통일된 값 설정을 위해 함수를 생성 
@function px2($u) {
  @return $u+px;
}
@function rem2($u) {
  @return $u+rem;
}


// 단위를 px과 rem 모두 작성해주는 mixin 수정 
@mixin unit2($s, $u) {
  #{$s}: px($u);
  #{$s}: rem($u);
}

// 기준 디바이스 크기를 입력하면 vw로 변환해주 는 "계산기" mixin 수정 
$device: 600;
@mixin vw2($s, $u, $d: $device) {
  #{$s}: px($u);
  #{$s}: ($u / $d * 100)+vw;
  min: {
    #{$s}: px($u);
    #{$s}: rem($u);
  }
}


