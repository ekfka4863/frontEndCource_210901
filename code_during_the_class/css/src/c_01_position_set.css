@charset "UTF-8";
/* c_01_position_set.css*/


/* 첫번째 wrap 부분... */
#wrap {
  width: 800px;
  height: 2500px;
  padding-top: 100px;
  background-color: #eee;
}

h1 {
  /* h1의 기준은 더이상 부모가 아니고 브라우저 기준이 되어 버린다.
  하지만 시작 위치가 이상한데... 그러면 어카냐!? 
  이럴 때, top과 left 등을 사용하라는 것~ */
  position: fixed;
  top: 0;
  left: 0;
  /* 그리고 포지셔닝을 한 요소의 높이만큼 올라가니까.... 그걸 감안 해서 ... 
  부모요소에서 패딩을 주는 방법이 있다. */

  width: 100%;
  height: auto;
  padding: 20px;
  text-align: center;
  background-color: #faa;
}

.part {
  /* 스티키로 포지션을 쓰면 앞으로 일단 오는 것은 같다. 
  static 과 fixed 의 중간 버전인 듯 작동한다. 
  스티키로 포지션을 주고 탑 0을 하면, 해당 요소가 탑 0 지점에 
  다 달았을 때, 픽스트처럼 작용한다. */
  position: sticky;
  top: 0;

  width: 95%;
  height: 600px;
  margin: auto;
  margin-top: 30px;
  border: 2px solid #777;
}
.part:last-of-type {
  /* background-color: #add; */
}

/* ---------------------------------------- */
/* 두번째 wrap 부분... */

.h1 {
  position: fixed;
  top: 0;
  left: 0;
  z-index: 100;

  width: 100%;
  text-align: center;
  background-color: #faa;
  
}
.part {
  position: relative;
  z-index: 200;

  width: 95%;
  height: 600px;
  margin: auto;
  margin-top: 30px;

  /* 포지션 앱솔루트는 패딩의 영향을 받지 않는다는 사실을 알 수 있다. */
  padding: 50px;
  box-sizing: border-box;
  /* 하지만 앱솔루트는 보더에는 영향을 받는다는 사실! */
  border: 2px solid #777;
  /* border: 20px solid #777; */
  background-color: #faa;
  background-clip: content-box;
}
.btn {
  /* 앱솔루트를 버튼 자체에 주는 것이 아니고, 
  그것을 감싸고 있는 부모에게 준다. 
  만약 버튼에게 바로 주면 호버할때 .part 전체가 색깔이 물들게 됨! 
  컨트롤 하기 좋은 방향으로 이렇게 할 것! */
  position: absolute;
  /* bottom: 0;
  right: 0; */
  bottom: 30px;
  right: 30px;

  width: 200px;
  height: 60px;
  background-color: #add;
}
.btn > button { 
  width: 100%;
  height: 100%;
} 
.btn > button:hover {
  background-color: #9aa;
}
.btn > button:focus {
  outline: 5px solid #333;
}


.card {
  /* 스탭 1 - 블라인드 카드의 앱솔루트를 적용하면 여기를 기준으로 위치하게... */
  position: relative;

  width: 250px;
  height: 340px;
  margin-top: 50px auto;
  background-color: #ccc;
  box-shadow: 3px 3px 3px #333;
}
.card a {
  display: block;
  width: 100%;
  height: 100%;
  padding: 10px;
  box-sizing: border-box;
}
.view_card {
  width: 100%;
  height: 100%;
  background-color: #fff;
}
.blind_card {
  /* 스탭 2 - 일단 호버나 포커스를 먹일 떄만 블라인드 카드가 보이게끔 하길 원하니까 일단 display: none; 처리를 한다. */
  display: none;

  /* 스탭 1 - 블라인드 카드와 뷰 카드를 겹친다 
  이떄, 앱솔루트는 부모 요소 중 아무도 렐러티브를 갖고 있지 않으면...
  그러면 자동으로 브라우저를 기준으로 위치를 자리잡게 된다. */
  position: absolute;
  top: 0;
  left: 0;

  width: 100%;
  height: 100%;
  color: #fff;
  padding: 25px;
  font-weight: 900;
  background-color: rgba(0, 50, 50, 0.85);
}

/* 스탭 3 - a에 포커스와 호버가 가능....그래서 ... 
호버나 포거스가 가면 ... 원래는 display: none; 이었던 
블라인드 카드를 보이게끔 속성을 만들어 다시 부여.... */
.card > a:hover .blind_card,    /* .card 바로 아래 있는 a 요소에 호버나 포커스가 가면.... 그러면 블라인드 카드에 ~~~ 해라~~~ */
.card > a:focus .blind_card {
  display: block;
}
/* cf. focusable 한 elements -> 상호 작용이 필요한 요소들... 
예를 들어, 버튼, 인풋, 폼태그, a태그, 텍스트에리아, 셀릭트, iframe, 등등...  */



/* ---------------------------------------- */
/* try an exercise... */
.footer_links {
  width: auto;
  height: auto;
  background-color: #faa;
}
.footer_links 

.links_inner > a {
  display: inline-block;
  /* float: left; */
  width: auto;
  margin: 10px;
  /* margin-right: 5px; */
  font-weight: 900;
  color: #444;
  text-decoration: none;
  line-height: 20px;
  background-color: rgb(191, 176, 255);
}
.links_inner > a::after {
  /* 엔티티 코드 말고... 
  유니코드는 사용해도 됨! */
  content: '\007c';
  font-size: 2px;
  /* 솔루션: 래핑하는 요소 ul>li든 span태그든 피료@ 
  그리고 그 래핑요소를 기주능로 가상 요소를 만들어서 
  해ㅈ당 가상 요소의 양옆 마진을 컨트롤하면 됌!  */
  margin-left: 5px;
  /* border-right: 1px solid #777; */
  /* margin: 0px 25px; */
}
.links_inner > a:last-of-type::after {
  content: '';
}
.links_inner > a:hover,
.links_inner > a:focus {
  color: red;
}






/* footer에 .nav_list */
.nav_list {
  width: 600px;
  height: 100px;
  margin: auto;
  margin-top: 100px;
  border: 1px solid #171717;
  background-color: #fff;
}
.nav_list ul {
  width: 100%;
  /* height: auto; */
  height: 30px;
}
.nav_list li {
  position: relative;

  float: left;
  width: auto;
  height: auto;
  margin-right: 10px;
  background-color: #fd5;
}
.nav_list li:last-child {
  margin-right: 0;
}
.bar {
  display: none;

  float: left;
  width: 1px;
  height: 10px;
  margin-left: -5px;
  margin-top: 5px;
  background: #777;
}
.nav_list a {
  display: block;
  /* width: 100%;
  height: 100%; */
  /* width: 100px;
  height: 50px; */
  background-color: #7ff;
}


/* span 안쓰면... 두번째 방법으로 이거... */
.nav_list li:first-child:before, 
.nav_list li:first-child::before {
  display: none;
}

.nav_list li:before,
.nav_list li::before {
  display: none;

  content: '';
  float: left;
  width: 1px;
  height: 10px;
  margin-left: -5px;
  margin-top: 5px;
  background-color: #59a;
}


/* 솔루션 3 - before말고 after도 가능 */
.nav_list li:after,
.nav_list li::after {
  /* entity 코드는 가끔 읽을 수도 있기때문에... 생략... */
  content: '';
  display: block;
  /* float: right;
  margin-left: 10px; */
  /* 위와 같이 플로트를 주는 방법도 있지만 나중에 a 태그가 크기를 갖으면 변할 수도 있으니까... */
  
  /* 이걸 선호... 추천... 
  대신 여기다가 앱솔루트 줄거면 li라는 부모요소에 렐러티브 주기... */
  position: absolute;
  /* top: 5px; */
  top: 0;
  bottom: 0;
  right: -5px;
  margin: auto;

  width: 0;
  height: 10px;
  border-right: 1px solid #19a;

  display: none;
}

/* 솔루션 4 - li에 border를 활용하는 방법 */
.nav_list li {
  height: 10px;
  margin-right: 10px;
  padding-right: 10px;
  border-right: 1px solid #f06;
}
.nav_list li:last-child {
  border: 0;
  margin-right: 0;
}
.nav_list a {
  /* width: 100px;
  height: 50px; */
  background-color: #7ff;
}
