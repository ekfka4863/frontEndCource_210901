// 반복문의 기본 형태 
// 반복문 1 
//     ->  while(조건){반복수행할 코드}
// 반복문 2 
//     ->  do {} while()
// 반복문 3 
//     ->  for() {}
// 반복문 4 
//     ->  for( in ) {}
// 반복문 5 
//     ->  배열.forEach(function(){});


// =============================================================================================
// 반복문 1: while  
// 문제: 30 ~ 90 사이의 수를 전부 출력하시오. (cf. 단, 30과 90은 출력되지 않게!)

var i = 31;

while(i < 90) {
  console.log(i);
  i+=1;
}


// =============================================================================================
// 반복문 2: do {} while() 
// 문제: j가 3 미만의 숫자일 동안, 거짓이었을 때도 무조건 한번은 '실행!'과 현재 변수값으로 할당된 숫자를 출력하게 만드시오.
// (cf. 단, j의 초깃값은 0이다. )
var j = 0;

do {
  j++;  
  console.log('실행!', j);  
} while (j < 3)  

// 실행! 1     실행! 2     실행! 3


//  =============================================================================================
// 반복문 3: for() {}
// 문제: 0 ~ 20 미만의 숫자 중 짝수와 홀수에 따라 해당 숫자와, '짝수입니다' 또는 '홀수입니다'를 출력하는 함수 isEvenOdd를 만드시오. 
// 함수로 감싸서 원하는 곳에서 호출할 수 있게 한다 
var isEvenOdd = function() {
  var y;

  for (y = 0; y < 20; y++) { 

    if(y % 2 === 0) {
      console.log(y, ' 짝수입니다');
    } else {
      console.log(y, ' 홀수입니다');
    }

  }
};

isEvenOdd();    


//  =============================================================================================
// 반복문 4: for( in ) {}

// --------------------------------------------
// <extra information>

// 생성자함수 이해하기  - JS는 객체를 만드는 다양한 방법을 제공한다 
var obj = {};   // 1. 빈객체 생성 - 객체 리터럴

var person = new Object(); // 2. 빈객체 생성 - Object() 생성자함수 (cf. 내장함수/빌트인객체)


function Person(name, age) {     // 3. 생성자 함수 (cf. 객체의 추상화 - 붕어빵틀과 붕어빵들)   
  this.name = name; 
  this.age = age; 
}

var daye = new Person('daye', 26);
var youngsun = new Person('youngsun', 28);


// cf.  https://victorydntmd.tistory.com/51
// --------------------------------------------


// 다시 .... 본론으로 ... 
// 반복문 4: for( in ) {}

// for in 반복문 올바르게 사용하기 
// step - 1: 아래와 같이 배열 arr과 객체 obj가 있다고 가정한다 
var arr = ['딸기', '바나나', '키위', '수박', '포도'];
var obj = {
  '딸기' : 'red', 
  '바나나' : 'yellow', 
  '키위' : 'brown', 
  '수박' : 'green', 
  '포도' : 'purple'
};


// step - 2: 배열부터 for in문 적용 -> 올바르지 못한 예시/사용법!
for (var sample in arr) {
  console.log(sample);    // 결과: 베열에 존재하는 각각의 값의 인덱스가 for문으로 반복되어 출력되었다
}


// step - 3: 이번엔 객체에 for in문 사용 ...   -> 올바른 사용예시! 
for (var sample in obj) {
  console.log(sample);    // for문을 돌아 각 프로퍼티의 키들이 출력되었다  -> e.g. 딸기  바나나  키위  수박  포도
}
console.log(sample);         // 포도
console.log(obj[sample]);         // purple




//  =============================================================================================
// 반복문 5:
// 사용 방법  
// 배열.forEach(function(){});
// 배열.forEach((element) => {
//   // code
// });



            [0]      [1]      [2]     [3]     [4]
var arr = ['딸기', '바나나', '키위', '수박', '포도'];

arr.forEach(function(data, index) {
  // console.log(data, index);
  console.log(index, data);
});


// --------------------------------------------
// <extra information>
// 배열(array) vs 유사배열객체 (array-like object)

// 정의: 배열이 아닌데 배열인척 하는 것을  유사배열 객체 혹은 유사배열이라고 부른다.
// 특징 1: 배열처럼 length 가 존재 + 인덱스로 값을 불러올 수 있다
//         e.g.
//          var yoosa = {
//            0: 'a',
//            1: 'b',
//            2: 'c',
//            length: 3
//          };

//           yoosa[0]
//           yoosa[2]

// 특징 2: 순회가 가능하다 

// 특징/다른점 3: 하지만 배열인 척 하는 객체일뿐 실제로 배열은 아니기 때문에 배열 메소드를 사용할 수 없다. 
//                e.g. forEach() -> 사용 불가 

// 특징/다른점 4: 콘솔창에 NodeList 또는 HTMLCollection이라고 출력되는 아이들은 모두 유사배열객체다

// 왜 이걸 알아야.. 하는지 ... ?? 
//     -> 이유: 사실 직접적으로 사용할 이유는 없다고 봐도 무방하다. 단, 브라우저가 NodeList 또는 HTMLCollection 같은 
//        데이터를 유사배열객체로 전달해주기 때문에 "어쩔 수 없이" 알아야 된다고 생각하기!  


// cf.  https://www.zerocho.com/category/JavaScript/post/5af6f9e707d77a001bb579d2
// cf.  https://kamang-it.tistory.com/entry/JavaScript15%EC%9C%A0%EC%82%AC%EB%B0%B0%EC%97%B4-%EA%B0%9D%EC%B2%B4Arraylike-Objects
// --------------------------------------------

//  =============================================================================================
